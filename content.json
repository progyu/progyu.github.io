{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://progyu.github.io","root":"/"},"pages":[],"posts":[{"title":"190410_TIL(LINE 웹페이지 header html,css, fontello)","slug":"190410-TIL-line-웹페이지-header-css-fontello","date":"2019-04-10T15:57:57.000Z","updated":"2019-04-11T11:45:00.331Z","comments":true,"path":"2019/04/11/190410-TIL-line-웹페이지-header-css-fontello/","link":"","permalink":"http://progyu.github.io/2019/04/11/190410-TIL-line-웹페이지-header-css-fontello/","excerpt":"","text":"4월 10일 (수) 오늘은 과제로 LINE Plus Coporation 의 header 부분의 HTML markup 과 CSS 작업을 하였다. 코딩에 들어가기에 앞서 아래 사진과 같이 수작업으로 설계를 해보았다. 수작업으로 설계를 해보니 꼼꼼한 작업을 할 수 있다는 장점이 있지만 시간이 많이 소요되어서 지루하게 느껴지는 단점이 있다. 다음 설계는 카카오 오븐과 같은 툴을 사용해 볼 생각이다. LINE css 작업을 진행하면서 fontello로 아이콘을 넣어봤다.기존의 아이콘을 사용할 때는 i태그를 사용하거나 image 파일을 사용하는 방식이었는데 fontello는 class를 html 요소의 추가하는 방식으로 아이콘을 사용할 수 있어 간편했다. 사용방법은 비교적 어렵지 않고 아래와 같이 사용하면 된다. fontello사이트의 접속 후 원하는 아이콘을 클릭하고 우측 상단에 있는 Download webfont 버튼을 클릭한다. 압축을 풀고 font 폴더와 fontello.css 파일을 현재 작업중인 폴더로 복사한다. fontello.css에서 설정을 변경한다. 먼저 font 폴더의 경로가 잘 설정되어 있는지 확인한다. 1$ src: url('../font/fontello.eot?63304039'); fontello는 가상요소를 이용하여 html요소의 앞 뒤에 배치한다. before를 after로 변경할 수 있다. 1$ [class^=\"icon-\"]:before, [class*=\" icon-\"]:before fontello.css의 가장 하단에 아이콘 클래스와 가상요소가 정의되어 있다. 새로운 아이콘을 사용하고 싶을 때는 이 부분만 넣어주면 된다. 1$ .icon-cog-alt:before &#123; content: '\\e800'; &#125; /* '' */ :before 가상요소 앞에 있는 class를 html 요소의 class의 넣어주기만 하면 아이콘을 사용할 수 있다.","categories":[],"tags":[]},{"title":"190409_TIL(탭메뉴,white-space:nowrap, .on() method, 유사배열,async and defer)","slug":"190409-TIL-탭메뉴-white-space-nowrap-on-method-유사배열-async-and-defer","date":"2019-04-09T12:24:27.000Z","updated":"2019-04-09T15:17:35.228Z","comments":true,"path":"2019/04/09/190409-TIL-탭메뉴-white-space-nowrap-on-method-유사배열-async-and-defer/","link":"","permalink":"http://progyu.github.io/2019/04/09/190409-TIL-탭메뉴-white-space-nowrap-on-method-유사배열-async-and-defer/","excerpt":"","text":"4월 9일 (화) 오늘은 탭메뉴를 float , position 속성 등을 사용하여 다양하게 구현해보았다. html 이나 css 보다는 탭메뉴를 동적으로 만들기 위한 방법을 정리해보고자 한다. 동적인 탭메뉴를 만들기 위한 class를 처음에 보여질 탭메뉴 태그의 작성한다. 위에서 만든 class에 display:block; 스타일을 입힌다. 나머지 첫화면에 표시하지 않을 탭메뉴 내용들은 display:none;으로 숨김 처리한다. 자바스크립트를 이용하여 class를 동적으로 생성하고 삭제한다. 기타 배운 내용들 정리 Whiite-space: nowrap;부모 영역을 벗어나더라도 한줄로 나오게 한다. 즉, wrap 하지 않게 한다. .on() method를 사용하면 하나의 이벤트 핸들러에 여러 개의 이벤트를 동시에 연결할 수 있다. 참고자료 한 선택자에 여러 요소가 있으면 유사배열 형식으로 값을 반환한다.예를들면 아래와 같이 여러 li 태그들의 class로 적용되어 있는(가정) .menu-item은 li태그를 유사배열 형식으로 반환한다. 12$ var item = $(&apos;.menu-item&apos;);$ console.log(item); // 유사배열 값 반환. 유사배열은 아직 많은 부분이 이해가 가지 않는다. 앞으로 더욱 많은 배움을 통해 알아가자! 유사배열 참고자료 일반적인 &lt;script&gt; 실행은 인라인 코드의 경우 즉시 해석되고 실행되지만 그렇지 않은 경우는 해당 js 파일을 가져올 때까지 HTML 문서의 구문 분석을 중단한다. async속성이 추가된 경우의 실행은 HTML 구문 분석과 병행하여 스크립트를 가져온 후 스크립트가 준비 될 때마다 즉시 실행이 가능하다. 실행 순서가 다운로드 완료 시점의 결정되므로 사용에 주의해야 한다. defer 속성이 추가된 경우의 실행은 HTML 구문분석이 실행되는 동안 스크립트 파일을 다운로드 할 수 있다. 그러나 HTML 구문 분석이 완료 되어야 스크립트가 실행된다. 호출된 순서대로 실행된다.","categories":[],"tags":[]},{"title":"190408_TIL(Float, Clearfix)","slug":"190408-TIL-float-clearfix","date":"2019-04-08T15:14:52.000Z","updated":"2019-04-09T12:05:28.275Z","comments":true,"path":"2019/04/09/190408-TIL-float-clearfix/","link":"","permalink":"http://progyu.github.io/2019/04/09/190408-TIL-float-clearfix/","excerpt":"","text":"4월 8일 (월) 수업시간에 float 만을 활용하여 layout을 잡는 연습을 하였다. float 란 일반적인 흐름(normal flow)를 벗어나 부모 요소의 왼쪽이나 오른쪽에 배치하는 것이다. float로 요소를 배치하는 것은 상당히 까다로운 일인데 그 이유는 다른 요소의 배치에 영향을 미치기 때문이다. float가 배치에 영향을 미치는 것을 해제하기 위한 속성이 clear이다. clear 속성 같이 반복적으로 사용되는 속성을 css에서 임의의 클래스로 만들어 html 태그 class 값으로 주어 사용하는데 이를 css 모듈화 라고 한다. clear 속성을 모듈화 하는 것은 이미 보편적으로 사용하고 있고 clearfix라는 명칭도 있다. clearfix는 임의의 클래스에 ::after와 같은 가상요소를 넣고 빈 블럭을 display:block으로 만들고 clear: both를 사용하여 float 속성 값을 초기화하는 것이다. float 속성에 대하여 여러모로 공부를 좀 했지만 아직도 많은 부분 부족한거 같다.생활코딩 강의 등을 통하여 좀 더 확실히 배워야겠다. clearfix참고 CSS모듈참고","categories":[],"tags":[]},{"title":"190331-0401_TIL(프로젝트 보완, box-sizing 속성, box model, flex box)","slug":"190331-0401-TIL-프로젝트보완-box-sizing 속성-box-model-flex-box","date":"2019-04-01T10:50:22.000Z","updated":"2019-04-01T12:01:07.065Z","comments":true,"path":"2019/04/01/190331-0401-TIL-프로젝트보완-box-sizing 속성-box-model-flex-box/","link":"","permalink":"http://progyu.github.io/2019/04/01/190331-0401-TIL-프로젝트보완-box-sizing 속성-box-model-flex-box/","excerpt":"","text":"3월 31일 (일) 오늘은 프로젝트에서 아직 부족한 점을 보완하기 위해서 오후 시간을 비워뒀다. 총 세 가지의 보완사항이 있었는데 첫번째는 to-do 입력 시 input 창 안이 공백이어도 입력이 되는 문제를 보완해야 하는 사항이었다. 이 문제는 간단하기 때문에 가장 먼저 처리하기로 했다. 조건문에 input 창 안이 공백이면 alert 창을 띄움으로써 해결하였다. 두번째 보완사항은 배경 이미지를 선택하여 변경 이후 다시 로드할 때 변경된 이미지 값이 저장되지 않는 사항이었다. 로컬스토리지에 저장하면 해결될 사항이었다. 우선 배경이미지를 저장할 함수를 하나 생성하여 .css() 메서드로 &#39;background&#39; 값을 가져오고 배경이미지를 클릭하여 선택할 시 함수를 호출하여 저장하게 하였다. 그리고 로드할 함수를 하나 더 생성하여 .css()매서드로 &#39;background&#39; 값을 가져오고 함수를 호출하여 로드하였다. 마지막은 클래스가 겹치는 현상으로 인하여 같은 위치에 포스트잇이 겹치는 현상을 해결하여야 했다. 클래스의 중복문제를 해결해보고자 했지만 잘 해결이 되지 않아서 아예 다른 방법을 고안하였다. 그것은 포스트잇이 하나 생성될 때마다 위치 값을 랜덤으로 주는 방식이다. 먼저 랜덤한 수를 생성하기 위하여 Math.random()매서드를 사용하였다. 그 다음 .find() 매서드와 .css() 매서드를 이용하여 포스트잇에 위치 값을 주었다. 그리고 나서 이 랜덤 한 위치 값을 로컬스토리지에 저장하여 랜덤한 위치를 가지는 포스트잇으로 문제를 보완하였다.주말에 골치 아픈 문제를 가지고 씨름하고 머리 아프고 힘들었지만 문제를 보완한 이후에 오는 뿌듯함이 그 모든 것을 상쇄시켰다. 보람찬 하루로 기억될 것 같다. 4월 1일 (월) 오늘은 김데레사 강사님의 첫 강의 시간이었다. 설렘 반 걱정 반으로 수업에 참여하였는데 정말 기초부터 탄탄하게 잘 가르쳐주셔서 많은 배움이 있었던 하루였다. 오늘 배운 정말 많은 내용 중에서도 가장 중요하다고 생각되는 box-sizing 속성, box model 그리고 flex model을 정리하도록 하겠다. box-sizing 속성 content-box는` 요소 박스에 지정된 모든 값을 더해 박스의 크기를 결정하는 방식. 예를들어, 콘텐츠 너비가 200px이고 안쪽 여백(padding) 크기가 40px, 그리고 테두리 굵기(border)가 10px인 실제 박스의 크기는 앞에 값을모두 더한 값인 250px이 된다. border-box는 콘텐츠에 지정된 너비인 200px에 안쪽 여백(padding)인 40px과 테두리 굵기(border)인 10px이 포함된다. 그렇게 되면 실제 박스의 크기는 250px이 아니라 200px이 된다. box model margin 속성은 padding 속성과 달리 속성 값에 음수 값을 사용할 수 있다. 그리고 margin-[방향]의 상세 속성을 이용하여 방향별로 지정할 수도 있으며, 이때는 하나의 속성 값만 사용할 수 있다.margin의 특성 중에 상하로 인접한 박스의 display 속성 값이 &quot;block&quot;인 경우, 마진 겹침(Margin Collapsing) 현상이 발생한다.margin-bottom 속성 값이 “10px”이고, B 요소의 margin-top 속성 값이 20px”일 때 두 요소 사이의 margin은 20px로 적용된다. flex model flexboxs는 주축과 교차축이라는 두 개의 축이 존재한다. 주축은 flex-direction 속성을 사용하여 지정하며 교차축은 이에 수직인 축으로 결정된다. flex-direction의 속성은 row , row-reverse, column, column-reverse로 나뉜다.row , row-reverse는 인라인 방향을 따르고 column, column-reverse은 블록 방향을 따른다. flexbox는 주축, 교차축을 따라 항목을 정렬하고 끝을 맞추는 각종 속성들을 적용하는 방식으로 동작한다. flex 컨테이너를 생성하려면 영역 내의 컨테이너 요소의 display 값을 flex 혹은 inline-flex로 지정한다. flex 항목들은 각 항목 별 내부 요소의 크기로 주축을 따라 정렬된다. flex 요소의 정렬 방향은 “왼쪽, 오른쪽, 위, 아래”를 사용하지 않고 시작선 , 끝선을 사용한다. flex-direction: row-reverse 라고 지정하면 행으로 나열되는 것은 그대로지만 시작 선과 끝 선이 서로 바뀌게 된다. flexbox는 1차원 모델이지만 flex 항목이 여러 행에 나열되도록 할 수 있다. 그 경우 각 행이 새로운 flex 컨테이너라고 생각해야 한다. 공간 배분은 해당 행에서만 이루어지며 다른 행은 영향을 받지 않는다. 항목이 여러 행에 나열되도록 하려면 flex-wrap 속성의 값을 wrap으로 지정해야한다. 그림으로 배우는 flex model, 게임으로 배우는 flex model, 이론 참고 사이트","categories":[],"tags":[]},{"title":"190327-0330_TIL(프로젝트, 개발 프로젝트 단계 특강)","slug":"190327-0330-TIL-프로젝트-개발-프로젝트-단계-특강","date":"2019-03-31T08:46:08.000Z","updated":"2019-03-31T09:55:51.717Z","comments":true,"path":"2019/03/31/190327-0330-TIL-프로젝트-개발-프로젝트-단계-특강/","link":"","permalink":"http://progyu.github.io/2019/03/31/190327-0330-TIL-프로젝트-개발-프로젝트-단계-특강/","excerpt":"","text":"3월 30일 (토) 오늘은 패스트캠퍼스에서 주최하는 기초개발특강(UX, UI, 개발 프로젝트 단계)를 듣고 왔다. 자리가 제한되어 있었기 때문에 신청한 사람들 중에 선착순으로 들을 수 있었는데 다행히 제한인원 안에 들었다. 이 특강을 신청한 이유는 평소에도 실제 개발 업무에서 프로젝트가 어떻게 진행되는지 궁금했기 때문이다. 오늘 강의로 그 궁금증을 풀 수 있을지 걱정 반 기대 반이 었는데 아주 만족스러운 내용의 강의였다. 오늘 배운 내용을 모두 정리하기에는 그 양이 너무 방대할 것으로 예상되기 때문에 강사님이 강조한 부분과 내 기억에 많이 남는 부분 위주로 정리하겠다. 웹 서비스 개발 프로젝트의 단계는 기획 - 디자인 - 개발 - 테스트 - 배포 나뉜다. 그중에서도 디자인 - 개발 - 테스트 가 개발단계로 분류된다. 프론트엔드 개발자는 당연히 개발 업무가 주업무이다. 동료 기획자, 디자이너, 개발자와의 원활한 의사소통이 중요하다. 그러기 위해서 기획자나 디자이너가 자주 쓰는 용어들을 알아두면 좋다. 각 요소 하나 하나에만 신경쓰지 말고 전체적인 flow도 생각하기, ux를 고려할 때 웹이나 앱 안에서만 갇혀서 생각하지 말고 실제 사용자가 되어 생각해보기. 예) 쏘카 이용자들은 차를 처음 탔을 때는 쏘카 앱을 잘 보지 않고 목적지만을 향해 간다. 따라서, 전 사용자에 대한 평가를 차를 타고난 직후가 아닌 차를 탄 이후에 하게 하는 것이 좋다. github issue page, 코드리뷰, Scrum Board, Kanban Board 등을 통해 협업하고 의사소통하기 프로젝트 매니징 : IA 설계, WBS, Gantt-Chart, Agile 처음에 이런 저런 기능을 붙이기 보다는 핵심 기능 한가지를 찾아내고 그 기능이 정말 잘 돌아가게 만든 후 확장하기 예) toss 3월 29일 (금) 오늘은 프로젝트의 마지막 날이다. 기능적인 부분들은 어제 완료를 했기 때문에 오늘은 세부적으로 디자인 요소를 변경하고 팀원들과 코드를 합치는 일을 하였다. 먼저 화면 전체를 채우고 있는 이미지 요소의 크기 단위가 %로 되어있던 것을 어느 브라우저에서나 화면에 꽉 차게 보이게 하기위해서 vh 단위로 바꾸었다. css 단위에 대해서는 아직 부족한 부분이 많기 때문에 앞으로 더 공부해 나갈 것이다. css 단위 참고 블로그 그리고 나서 각자의 코드를 합치기 전에 주석을 비롯해서 정리하고 git을 이용하여 팀원들이 pull request를 하고 pm인 내가 merge를 승인하여 코드를 합쳤다. 다행히도 conflict 난 부분이 많지 않아서 금세 안정적으로 프로젝트 결과물을 제출할 수 있었다. 프로젝트를 진행하면서 느낀점이 많이 있었다. 첫번째로 무작정 코딩을 진행하기 보다는 그 전에 확실히 어떤 라이브러리를 사용할 것인지, 어떤 기능을 만들 것인지, 전체적인 플로우는 어떻게 진행될 것인지 등을 오랜 시간을 들여 하는 것이 중요하다는 것이다. 코딩을 하는 시간이 짧아지면 왠지 모를 불안감이 생기지만 분명히 시간상으로도 프로젝트의 완성도를 생각할 때에도 무작정 코딩하는 것보다는 미리 완벽히 설계하고 들어가는 것이 중요하다. 팀원들과의 의사소통이 정말 중요하다. 팀원들끼리 현재 진행상황이나 문제점, 새로운 아이디어 등을 공유하면서 프로젝트를 진행하면 훨씬 높은 완성도의 결과물이 나올 수 있을 것이라 생각한다. 3월 28일 (목) 오늘은 어제 count 변수를 증가시키며 동적으로 생성한 클래스를 이용한 코드 에서 포스트잇을 삭제하였다가 다시 만들 때 와 로드 할 때 문제가 생겨서 문제를 해결하는데 많은 시간을 소비하였다. 문제해결을 하기 위해서 먼저 문제의 원인을 파악하는데 집중하였다. 문제의 원인은 비교적 간단하였다. 삭제할 때와 로드할 때 count 변수의 어떤 변화도 주지 않기 때문이었다. 그래서 삭제할 때는 count– 를 주고 road 할 때는 새로운 조건을 주어 문제를 해결하였다. 프로젝트의 마지막 기능인 배경 이미지를 변경하는 기능을 만들었다. 배경이미지를 img태그를 이용하여 준 것이 아니라 background: url attr()을 사용할 수 없었다. 그래서 css()를 활용하여서 썸네일 이미지를 클릭하면 그 이미지로 배경이 바뀌는 기능을 구현하였다. 3월 27일 (수) 오늘은 to-do-list의 핵심 기능인 메모(?)을 만들어서 입력, 삭제, 로컬스토리지 저장 기능까지 완료하였다. 우리 팀 to-do-list의 특징적인 부분은 글만 보이게 하는 것이 아닌 동적인 느낌을 주기 위해서 글을 입력하면 포스트잇이 화면에 생성된다. 이 부분이 기존 to-do-list보다 어려운 부분이었다. 기존 to-do-list는 list 각자 따로 css를 줄 필요가 없이 li 태그나 p 태그 등을 활용하면 알아서 밑으로 정렬되었지만 포스트잇은 각각의 위치가 잡혀 있어야하고 그렇게 하기 위해서는 각각 css를 이용하여 위치를 잡아주어야 했다. 그래서 처음 생각한 부분이 class를 각자 따로 주고 그 class 각각의 css를 주는 것이었다. 클래스를 동적으로 생성하기 위하여 count 변수 숫자를 증가시키고 그 count 변수와 문자열을 더한 값을 변수에 저장하여 addClass()를 통하여 각각의 포스트잇에 각기 다른 class를 추가하였다. 그리고 로컬스토리지에 저장할 때 class를 저장하고 불러올 때 class를 불러오게 하여서 포스트잇 각각의 위치를 저장하고 불러올 수 있게 하였다. 이 방법이 좋은 방법인지는 아직 모르겠지만 마음에 들지 않는다. 앞으로 더 공부해나가면서 더 좋은 방법이 떠오른다면 꼭 변경해보고 싶은 코드이다.","categories":[],"tags":[]},{"title":"190326_TIL(프로젝트 2일차)","slug":"190326-TIL-프로젝트-2일차","date":"2019-03-26T15:38:04.000Z","updated":"2019-03-26T16:19:11.273Z","comments":true,"path":"2019/03/27/190326-TIL-프로젝트-2일차/","link":"","permalink":"http://progyu.github.io/2019/03/27/190326-TIL-프로젝트-2일차/","excerpt":"","text":"3월 26일 (화) 어제 날씨 api를 이용하여 만든 기능은 온도, 습도, 구름량 등 많은 데이터를 알려주지만 데이터를 가져올 때 내가 위치를 지정해주어야만 했다. ##예) 서울의 날씨 데이터, 런던의 날씨 데이터## 이 정도 기능에 만족할 수는 없었고 내가 지금 현재 위치한 장소에 날씨 데이터를 받아오고 싶었다. 어떻게 기능을 구현할 수 있을지 생각해보니 이전 수업에서 자바스크립트로 내가 현재 위치한 위도와 경도 값을 얻어오는 것을 했던 기억이 떠올랐다. 그래서 어제 이용한 openweathermap 사이트에서 위도와 경도 값으로 위치를 찾아서 날씨 데이터를 넘겨주는 기능을 제공해주는지 찾아봤다. doc에서 찾아보다가 By geographic coordinates 라는 항목에서 제공을 해준다는 것을 알아내었다. API를 불러오는 Example은 api.openweathermap.org/data/2.5/weather?lat=35&amp;lon=139 이러하다. 이제 자바스크립트로 작성을 해야하는데 막막했다. 결국 검색을 통하여 해결책을 찾아냈다.노마드코더 해결책은 바로 이것이다. 동영상으로 학습하며 결국 해내었다. 날씨 기능 완료! 날씨 기능을 완료하고 to-do-list 작업을 진행하였다. 먼저 이전에 팀원들과 논의하여 사용할 컨텐츠들을 화면에 어디에 배치할지 좋을지 생각하고 그 다음 html, css 작업을 진행하였다. 우리 팀이 만들어내야할 결과물은 carousel 안에 컨텐츠를 집어넣어서 마치 여러 페이지가 있는 것처럼 보이게 하는 것이 핵심이었다. Bootstrap을 활용하면 carousel을 쉽게 만들 수 있지만 내가 원하는 대로 커스터마이징 하기 어렵다고 판단하여 html,css,javascript 만으로 구성된 carousel을 만들고 싶었다. 하지만 프로젝트 기간이 짧고 쉽게 만들 수 있다고 판단이 되지 않아서 검색을 하여 결국 찾아내었다.w3schools 유명한 사이트인 w3schools에서 찾았다. 이 사이트 how to 탭에는 유용한 정보들이 많이 있다. 그 중 내가 마음에 드는 몇 가지를 소개하겠다.Full page, Toggle password visibility, Multi Step Form, Meet the team page 오늘 프로젝트를 진행하며 느꼈던 점 과 새롭게 알게된 점 Bootstrap 이나 material design lite 같은 프레임워크를 중간에 사용하면 기존에 코드에 영향을 미칠 수 있다. input 태그 같은 inline 요소를 display:block; 로 지정해도 text-align:center가 적용되지 않는다. input 태그를 중앙에 배열하기 위하여 나는 input 태그를 div로 감싼 text-align:center를 적용하였다. visibility:hidden 속성을 이용하여 태그들의 배치나 정렬을 도울 수 있다. git은 팀원이 fork를 떠서 같은 파일을 서로 각기 작업했을 때 시너지가 좋다. develop branch에서 feature branch를 딴 순간 develop branch에 있는 내용이 새로 딴 feature branch에 복제되어 넘어간다. 어느 한 branch에서 작업을 하던 중 git bash를 꺼도 다음에 다시 git bash를 켜고 같은 경로로 들어가면 마지막에 위치해있던 branch로 되어있다.","categories":[],"tags":[]},{"title":"190325_TIL","slug":"190325-TIL","date":"2019-03-25T15:08:52.000Z","updated":"2019-03-31T09:59:12.010Z","comments":true,"path":"2019/03/26/190325-TIL/","link":"","permalink":"http://progyu.github.io/2019/03/26/190325-TIL/","excerpt":"","text":"3월 25일 (월) 오늘은 프로젝트 첫째날이다. 앞으로 5일 동안 프로젝트가 진행된다. 팀원들과 프로젝트 주제를 선정하기 위하여 많은 의견을 나누었다. 게임 홍보 페이지, 크롬 웹 익스텐션, 패럴렉스, 불꽃놀이 축제 홍보 페이지 등등 많은 아이디어가 나왔다. 많은 고민을 거듭한 끝에 그동안 배운 내용들을 복습하기 가장 좋은 주제로 선정하였다. 주제는 바로 naver에서 출시한 브라우저인 whale이다. whale의 디자인과 기능을 벤치마킹하기로 했다. 역할 분담은 인원에 맞춰서 총 세 파트로 구성하였다. 첫번째 파트는 to-do-list, 현재 시각과 날씨 정보 표기 그리고 화면 테마 변경, 두번째 파트는 다이어리, 디데이 마지막 파트는 공통으로 들어가는 요소인 사이드바에 계산기 , 환율, 음악검색 api 등의 기능을 구현하는 것이다. 나는 첫번째 파트를 맡게 되었다. git flow로 작업할 feature branch를 생성하고 작은 기능 단위인 날씨 api 기능을 진행하였다. 먼저 어떤 api를 사용할지 검색을 하였다. 네이버, 다음, 구글과 같은 곳에서는 날씨 api를 제공하지 않았다. 상당히 많은 시간을 검색한 끝에 openweathermap이라는 해외사이트에서 제공하는 api를 사용하기로 했다. 홈페이지와 다른 사람의 개인 블로그를 참고하였다. ajax를 이용하여 JSON 형식의 데이터를 전송 받았다. 디자인적으로 예쁜 날씨 아이콘을 사용하기 위하여 아이콘을 사용하였다. 위 사이트에서 다운을 받아 css 폴더와 font 폴더를 작업 중인 폴더에 복사하고 html 파일에 링크를 걸어 사용하였다. jquery로 아이콘과 날씨 데이터를 html에 매핑하고 css를 이용하여 디자인 작업을 진행하였다. 작은 공간에 많은 데이터를 넣고 정렬하는 것이 쉽지 않았다. 머리 속으로 생각하고 실제로 그려보면서 어떻게 정렬할지 시뮬레이션 하고 코딩하였다. 결과적으로는 예쁜 디자인의 날씨 데이터를 보여주는 기능을 만들어서 매우 뿌듯했다.","categories":[],"tags":[]},{"title":"190319-0322_TIL(local storage, git flow, git fork, api)","slug":"190319-0322-TIL-local-storage-git-flow-git-fork-api","date":"2019-03-24T06:02:11.000Z","updated":"2019-03-24T10:58:57.010Z","comments":true,"path":"2019/03/24/190319-0322-TIL-local-storage-git-flow-git-fork-api/","link":"","permalink":"http://progyu.github.io/2019/03/24/190319-0322-TIL-local-storage-git-flow-git-fork-api/","excerpt":"","text":"3월 22일 (금) 쇼핑몰 상품 상세 페이지 copy 과제를 했다. 과제를 진행하던 중 div 태그를 display:inline-block으 사용하여 서로 같은 라인에 배치를 하였는데 이상하게도 윗 공간에 아무 요소도 없는데 오른쪽 div가 맨 위에 붙지 않고 제멋대로 붙었다. 고민을 거듭해도 답을 알 수가 없어 클래스 매니저님에게 물었더니 inline-block으로 묶으면 윗줄을 기준으로 붙는 것이 아니라 base-line을 기준으로 붙기 때문에 div의 height가 서로 다를 시 에는 윗줄의 붙지 않는 다고 하셨다. 해결책인 의의로 간단하였다. vertical-align 속성을 사용하여 요소를 위(top), 중간(middle), 아래(bottom)에 배치할 수 있었다. 자바스크립트 변수의 범위(scope)와 호이스팅(Hoisting)`에 대해서 배웠다. 수업시간에 짧게 배운 내용이 잘 이해가 가지 않아서 자료를 검색하던 중 잘 정리된 블로그를 발견하였다. 변수의 범위와 호이스팅 변수는 지역 범위(local scope)와 전역 범위(global scope) 둘 중 하나를 가진다. 대부분의 프로그래밍언어가 블럭 수준의 범위를 가지고 있는 것과 달리 자바스크립트에서는 지역 변수가 함수 수준8의 범위를 가진다. 함수 내에 정의된 변수는 지역 범위를 가지며, 해당 함수와 내부 함수에서만 접근이 가능하다. if문과 같은 블럭{} 수준에서 변수 선언 시 지역 변수가 아닌 전역 변수임을 유의해야 한다. 함수 안에서 지역 변수를 선언할 때는 var 키워드를 사용한다. 지역 변수는 함수 내에서 전역 변수보다 높은 우선 순위를 가진다. 함수의 외부에서 선언된 모든 변수는 전역 범위를 가진다. 전역 변수는 var 키워드를 사용해도 되고 사용하지 않아도 된다. 가급적 전역 범위에 변수를 생성하는 것을 피해야 한다. 호이스트란, 변수의 정의가 그 범위에 따라 선언과 할당으로 분리되는 것을 의미 즉, 변수가 함수 내에서 정의되었을 경우 선언이 함수의 최상위로, 함수 바깥에서 정의되었을 경우는 전역 컨텍스트의 최상위로 변경 호이스트 되었을 때, 함수 선언은 변수 선언을 덮어 쓴다. 하지만, 변수에 값이 할당된 경우 반대로 변수가 함수 선언을 덮어 쓴다. 3월 21일 (목) 오늘은 naver map api를 사용하여 기본적으로 지도를 화면에 표시하고 마커를 표시하고 정보창을 표시해보았다. 네이버 api를 사용하기 위해서는 먼저ncloud 에서 회원가입을 진행하고 이용신청을 하면된다. 그리고 실제로 사용을 위해서는 navermaps에서 Tutorials를 살펴보면 된다. 오늘 배운 것중 가장 신기했던 부분은 이전에 사용했던 다음 주소 api 와 네이버 지도 api를 연결해서 사용했던 부분이다. 다음 주소 api에서 검색한 주소 값을 받아서 네이버 지도 api에서 위도,경도 값으로 변환하여 그 위치에 마커를 찍을 수 있었다. 이런 기능은 geocoder 서브 모듈을 활용해야 한다. 3월 20일 (수) 오늘은 git 수업 날이었다. git flow와 git fork를 학습하였다. git flow는 git의 branch 기능을 좀 더 원활하고 쉽게 사용할 수 있게 만들어 버전관리를 용이하게 하는 확장 기능이고 git fork는 git을 사용하는 가장 주된 이유 중 하나인 협업을 할 수 있게 해주는 기능이다. 처음 접해보는 기능들이라 조금은 어려웠지만 그래도 팀원들과 함께 git fork를 테스트 하는 것까지 별다른 문제없이 성공하였다. git을 활용할 때는 팀원들 간의 의사소통이 정말 중요하다고 느꼈다. 3월 19일 (화) 오늘은 local_storage에 대해 배웠다. server 없이도 내 컴퓨터를 활용하여 웹에 있는 값을 저장할 수 있다니…! 브라우저를 닫고 열어도 다시 그 값이 들어있었다. 매우 신기했다. 하지만 내용은 어려웠다. 한달 동안의 수업 컨셉이 빠르게 한번 익혀보자는 것이기 때문인지 객체나 JSON의 대한 설명이 거의 없었다. 잘 모를 때는 역시 인터넷 검색으로! 아직도 잘 이해되지 않는 부분들이 많지만 열심히 배우고 또 배우면 금세 이해할 수 있을 것이다!! localstorage JSON 간단 JSON 자세히 객체","categories":[],"tags":[]},{"title":"git-flow 사용하기","slug":"git-flow-사용하기","date":"2019-03-24T02:26:54.000Z","updated":"2019-03-24T03:57:09.673Z","comments":true,"path":"2019/03/24/git-flow-사용하기/","link":"","permalink":"http://progyu.github.io/2019/03/24/git-flow-사용하기/","excerpt":"","text":"git flow란 ? Vincent Diessen의 branching model을 적용하여 저장소를 관리할 수 있도록해주는 확장기능 feature - develop - release - hotfixes - master 단계로 branch를 나누어서 버전을 관리하는 전략. branch 관리를 위한 확장 명령어를 제공하는 역할만 하기 때문에 기존의 git 명령어로도 이를 그대로 구현 가능 내 나름대로 정의를 해보면 ‘branch를 사용하기 위하여 처리해야 하는 귀찮은 일련의 작업을 쉽게 처리할 수 있게 도와주는 확장 기능’ git flow로 만들 수 있는 branch 6종 master : 최종 릴리즈에 사용되는 안정된 버전 develop : 다음 릴리즈를 위해 개발중인 최신 버전 feature : 특정 기능 개발을 위한 branch release : 릴리즈 점검을 위한 branch hotfix : 긴급 버그 픽스를 위한 branch support : 버전 호환성 문제를 처리하기 위한 branch 설치 git flow는 OSX, Linux, Window 환경에서 동작한다. git bash에는 기본으로 설치가 되어있다. 필자는 git bash를 사용. git bash 설치 git flow 시작하기 작업을 진행할 git 저장소에서 다음 명령어를 통해 초기화 한다. 1$ git flow init git flow init 명령어를 사용하면 branch 이름을 입력하라는 메세지가 출력된다. 이 과정을 생략하려면 아래 명령어를 사용한다. 1$ git flow init -d 특정 기능 개발을 하기 위한 branch는 feature를 사용한다. feature에서 git flow를 시작하기 위해서는 아래 명령어를 사용한다. 1$ git flow feature start &#123;branch_name&#125; 자동으로 해당 branch로 checkout 된다. 해당 branch에서 기능 개발이 완료하면 아래 명령어를 입력한다. 1$ git flow feature finish &#123;branch_name&#125; feature finish 명령어를 실행하면 자동으로 아래의 일련의 과정들을 수행한다. develop branch로 checkout feature branch의 작업 내용을 develop branch에 merge 작업이 끝난 feature branch를 삭제 만약 해당 feature branch가 존재했다는 사실을 github page에 남기고 싶으면 commit 메세지를 작성하면 된다. 만약 해당 branch를 merge 하지않고 삭제하고 싶다면 아래 명령어를 사용한다. 1$ git branch -D &#123;branch_name&#125; Release 하기 release를 하기 위해서는 아래 명령어를 사용한다. 1$ git flow release start &#123;version&#125; 위 명령어를 실행하면 develop branch의 내용을 바탕으로 release/{version}의 이름을 갖는 새로운 branch를 하나 생성하여 checkout 한다. version은 보통 v0.0.1형식으로 작성한다. 정식버전이 출시되면 v1.0.0 처럼 가장 앞의 숫자를 증가시키고 핵심 기능의 변화 등은 v1.1.0 작은 기능의 변화 등은 v1.1.1의 형식으로 작성한다. release를 위한 점검이 종료되면 release를 finish 한다. 1$ git flow release finish &#123;version&#125; release finish 명령어를 실행하면 자동으로 아래의 일련의 과정들을 수행한다. release branch의 code를 master branch에 merge 한다. release의 이름으로 태그 등록 release를 develop branch로 재병합 release branch 삭제","categories":[],"tags":[]},{"title":"Git fork를 활용하여 협업하기","slug":"Git-fork를-활용하여-협업하기","date":"2019-03-24T01:28:03.000Z","updated":"2019-03-24T02:18:34.900Z","comments":true,"path":"2019/03/24/Git-fork를-활용하여-협업하기/","link":"","permalink":"http://progyu.github.io/2019/03/24/Git-fork를-활용하여-협업하기/","excerpt":"","text":"이 포스트는 실제 협업 사례가 아닌 수업 내용을 토대로 하여 git fork 기능을 테스트 해본 경험임을 알려드립니다. Pm 파트 Pm이 새로운 repository를 생성한다. Pm이 clone을 하여 문서를 생성한다. 생성한 git 문서 경로롤 이동한다. develop branch를 하나 생성한다. (사실 git flow를 활용하여 작은 기능 단위를 작업하는 feature branch에서 작업해야함.) develop branch 로 checkout 한다. 파일을 생성하고 작성한 후 add, commit, push를 진행한다. 실제 코드를 작성하는 개발자 파트 pm의 repository에서 fork 한다. fork를 하면 pm과 같은 이름의 fork된 repository로 이동하고 닉네임 옆에 포크 아이콘이 표시된다. clone or download 버튼을 클릭하여 pm의 repository 주소를 복사하고 작업할 폴더에 clone 한다. 다음 명령어를 통해 pm의 branch 까지 전부 확인할 수 있다. 1git branch -a 다음 명령어를 통해 원본 repository를 로컬 git repository의 원력 등록한다. 1git remote add &#123;repository_nickname&#125; &#123;pm의 git_url&#125; develop branch를 생성한다. develop branch로 checkout 한다. 다음 명령어 원본 repository를 full한다. 1git pull &#123;repository_nickname&#125; &#123;branch_name&#125; pull을 실행하면, 원본 repository의 내용을 가져와 자동으로 병합 작업을 실행한다.단순히 원본 repository의 내용을 확인만하고 로컬 repository와 병합하고 싶지 않은 경우 다음 명령어를 실행한다. 1git fetch &#123;repository_nickname&#125; 그 후 병합하고 싶은 경우에는 다음 명령어를 실행한다. 1git merge &#123;respository_nickname&#125;/&#123;branch_name&#125; 원본 repository에 있는 파일을 작업하고 add, commit, push 한다. push를 할 때는 자신의 branch에서 push 한다. 1git push origin &#123;branch_name&#125; push를 하면 개발자가 fork한 github page에 compare &amp; pull request 버튼이 활성화 된다. 버튼을 클릭하고 메세지를 작성한 후 pm의 repository의 branch와 자신의 repository를 비교하여 자신이 보내는 위치의 branch와 보내려고 하는 branch를 확인한 후 create pull request 버튼을 클릭한다. 다시 pm 파트 github 페이지 repository를 확인하면 pull requests 탭에 숫자 1이 생겼을 것이다. pull requests 탭을 클릭하면 개발자 commit 메세지를 확인할 수 있고 클릭을 하면 merge를 할 수 있는 화면이 나온다. 이 화면에서 pm은 merge를 할지 말지 결정할 수 있고 개발자와 대화를 나눌 수도 있다. merge 버튼을 클릭하고 confirm merge 버튼을 재차 클릭하면 merge가 완료 되었다는 화면이 나타난다. 다른 화면으로 이동하면 pull requests 탭에 숫자 1이 사라진 것을 확인할 수 있다. code 탭으로 이동하여 develop branch를 선택하고 파일을 확인해보면 개발자가 작업한 내용이 pm의 repository에 잘 merge 된 것을 확인할 수 있다.","categories":[],"tags":[]},{"title":"190318_TIL","slug":"190318-TIL","date":"2019-03-18T11:05:46.000Z","updated":"2019-03-18T11:29:24.615Z","comments":true,"path":"2019/03/18/190318-TIL/","link":"","permalink":"http://progyu.github.io/2019/03/18/190318-TIL/","excerpt":"","text":"3월 18일 (월) 수업 시작하자마자 CSS만을 활용하여 메뉴를 생성하는 과제를 했다.매번 Bootstrap을 이용하여 쉽게 만들다가CSS만 활용하여 만들려고 하니 많이 어려웠다.강사님이 github에 올려주신 자료로 복습해야겠다. 다음 우편번호 서비스 api을 활용하여 회원가입 폼을 만들고 공백과 정규표현식을 활용하여 validation(유효성)검사까지 진행하였다. 다음 우편번호 서비스 api는 사용방법이 간단하며, 웹페이지에도 친절하게 설명이 되어있다. data 라는 객체에 사용자가 선택한 주소 정보를 담고 있다.따라서, 입력한 주소의 우편번호 값을 가져오고 싶으면 data.postcode 와 같은 형식으로 값을 받아올 수 있다.","categories":[],"tags":[]},{"title":"First use of hexo","slug":"First-use-of-hexo","date":"2019-03-17T14:43:37.000Z","updated":"2019-03-18T00:59:03.009Z","comments":true,"path":"2019/03/17/First-use-of-hexo/","link":"","permalink":"http://progyu.github.io/2019/03/17/First-use-of-hexo/","excerpt":"","text":"Hexo를 이용하여 gitblog 글 작성하기git repository 생성하기 자신의 [github name].github.io 로 repository를 생성한다. node 설치하기 Hexo를 이용하기 위해서는node 설치가 필요합니다. Hexo 설치하기 Hexo는 아래 명령어를 사용하여 설치한다. 1$ npm install -g hexo-cli 웹사이트 초기화하기 Hexo를 초기화 하기 위해 아래 명령어를 사용한다. 123$ hexo init [folder]$ cd &lt;folder&gt;$ npm install 새 글 생성하기 새 글(article)을 생성한다. layout이 준비되어 있지 않다면, _config.yml에 정의된 default_layout을 사용. 만약 title에 공백이 포함된다면 따옴표로 감싸주어야 한다. 1$ hexo new [layout] &lt;title&gt; 글 작성하기 위에서 생성한 새 글은 .md 파일 형식으로 생성된다. 새로 생성한 .md 파일은[프로젝트 폴더]/source/_posts/&lt;title&gt;.md 이 경로에 있다. 에디터를 이용하여 Markdown 형식으로 작성하면 된다. 정적 파일 생성하기1$ hexo generate [파일명] github 블로그는 html 파일형식으로 올라가야 한다. 따라서, Hexo로 제작된 .md 파일을 generate 커맨드를 사용하여 변환해주어야 한다. generate를 하기 위해서는 작성한 .md 파일이 있는 경로([프로젝트 폴더]/source/_posts/)로 이동하여야 한다. server로 미리 확인하기1$ hexo server 로컬 서버를 구동시킨다. 기본적으로 http://localhost:4000/ 를 사용. git에 deploy 하기 hexo-deployer-git을 설치한다. 1$ npm install hexo-deployer-git --save _cofig.yml 파일에서 url을 수정한다. http://자신의 [github name].github.io 로 url을 수정 한다. _cofig.yml 파일 가장 밑에 작성.123deploy: type: git repo: 자신의 [repository url] 웹사이트를 deploy 하기1$ hexo deploy 첫 번째 이후 github 블로그 작성 new, generate, server, deploy 4개의 명령어만 사용하면 된다. 느낀점 Hexo를 처음 이용하여 생소하고 어려웠지만 익숙해지면 편리하게 github 블로그를 관리할 수 있을 것 같다. Markdown 문법 공부에 많은 도움이 될 것 같다.","categories":[],"tags":[]},{"title":"How to start hexo","slug":"How-to-start-hexo","date":"2019-03-13T06:39:50.000Z","updated":"2019-03-13T06:48:38.807Z","comments":true,"path":"2019/03/13/How-to-start-hexo/","link":"","permalink":"http://progyu.github.io/2019/03/13/How-to-start-hexo/","excerpt":"","text":"How to start Hexo안녕하세요. progyu 입니다. 오늘은 hexo를 이용해 블로그를 생성하는 방법에 대해 알아보겠습니다. (이모티콘 - 개구리 - 데헷)","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-13T06:32:47.752Z","updated":"2019-03-13T06:32:47.755Z","comments":true,"path":"2019/03/13/hello-world/","link":"","permalink":"http://progyu.github.io/2019/03/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}